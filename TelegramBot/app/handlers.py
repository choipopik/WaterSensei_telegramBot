from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
"from database import get_ids"

from datetime import datetime, timedelta

import app.keyboards as kb
from database import add_user, plus_streak, get_streak, get_last_date, upd_date, break_streak, get_table

import emoji

router = Router()

current_date = datetime.now()

"id_list = get_ids()"
"print(get_ids())"

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é ,—É—á–µ–Ω–∏–∫, —è —Ç–≤–æ–π –≤–æ–¥–Ω—ã–π —Å–µ–Ω—Å–µ–π. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏ –≤–æ–¥–Ω–æ–≥–æ —à–∏–Ω–æ–±–∏!')


@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer(f"–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–ø–∏–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã! \n "
                         f"–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å - –≤—ã–ø–æ–ª–Ω–∏ /register,–∞ –∑–∞—Ç–µ–º —Å–æ–æ–±—â–∞–π –º–Ω–µ –æ –≤—ã–ø–∏—Ç—ã—Ö —Ç–æ–±–æ—é —Å—Ç–∞–∫–∞–Ω–∞—Ö –≤–æ–¥—ã, "
                         f"–≤—ã–ø–æ–ª–Ω—è–π –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∏ –∫–æ–ø–∏ {emoji.emojize(':fire:')}STREAK{emoji.emojize(':fire:')}.")


@router.message(Command('register'))
async def registration(message: Message):
    add_user(message)
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–≤–æ–π –ø—É—Ç—å –Ω–∞—á–∞–ª—Å—è!' + emoji.emojize(':flexed_biceps:'),
                         reply_markup=kb.main)


@router.message(lambda message: message.text == '–Ø –≤—ã–ø–∏–ª –≤–æ–¥—ã')
async def process_drink(message: Message):
    chat_id = message.chat.id
    curr_streak = get_streak(chat_id)
    last_click = datetime.strptime(get_last_date(chat_id), '%Y-%m-%d')
    print(last_click)
    print(current_date - last_click)
    print()
    if (current_date - last_click) < timedelta(days=1):
        await message.reply(f'–°–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã–ø–∏–ª —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!{emoji.emojize(':sweat_droplets:')}')
        return

    if last_click == 'date':
        plus_streak(message, curr_streak)
        upd_date(message)
        await message.reply(
            f"–¢—ã –ø–æ–ø–∏–ª –≤–æ–¥—ã! –¢–≤–æ–π STREAK : {curr_streak + 1} {emoji.emojize(':fire:')}.")
        return

    elif (current_date - last_click) > timedelta(days=2) and curr_streak != 0:
        curr_streak = 0
        await message.answer('–¢–≤–æ–π STREAK –°–ë–†–û–®–ï–ù')

    plus_streak(message, curr_streak)
    upd_date(message)
    await message.reply(
        f"–¢—ã –ø–æ–ø–∏–ª –≤–æ–¥—ã! –¢–≤–æ–π STREAK : {curr_streak + 1} {emoji.emojize(':fire:')}.")


@router.message(lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def show_profile(message: Message):
    chat_id = message.chat.id
    curr_streak = get_streak(chat_id)
    await message.answer(
        f"{emoji.emojize(':bust_in_silhouette:')} \n –ò–º—è: {message.chat.first_name} \n {emoji.emojize(':fire:')} STREAK x{curr_streak} {emoji.emojize(':fire:')}")


@router.message(lambda message: message.text == '–¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤')
async def show_leaderboard(message: Message):
    table = get_table(message)
    await message.reply(table, parse_mode='HTML')

"""@router.message_handler()
async def choose_your_dinner():
    for user in :
        await bot.send_message(chat_id = user, text = "–•–µ–πüññ –Ω–µ –∑–∞–±—É–¥—å
        –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π —É–∂–∏–Ω —Å–µ–≥–æ–¥–Ω—è", reply_markup = menu_garnish)"""


